

var colorSequence = [];  // sequence generated by the game
var playerSequence = []; // sequence entered by player
var strict = false; // if game is in strict mode
var gameOn = false; // if the game is On
var gameStart = false; // if a game has started
var pressColoredButtons = false;  // if colored buttons can be pressed
var count; // round being played

// reset stats when On/Off button is pressed
function resetAll() {
  resetStart();
  strict = false;
  $("#indicatorLight").html('<div id="strictLightOff"></div>');
  $("#countDisplay").html("--");
  gameStart = false;
  return 0;
}

// reset stats when Start button is pressed
function resetStart() {
  colorSequence = [];
  playerSequence = [];
  gameStart = true;
  recordPlay = false;
  pressColoredButtons = false;
  count = 0;
  return 0;
}

// return one of four colors
function randomColor () {
  var randNum = Math.random();
  randNum *= 4;
  randNum = Math.floor(randNum);
  switch (randNum) {
    case 0:
      return 'red';
    case 1:
      return 'green';
    case 2:
      return 'blue';
    case 3:
      return 'yellow';
    default:
      return 1;
  }
}

var playsToWin = 20; // how many plays are necessary to win
// return an array of "playsToWin" items, each item one color of four
function createColorSequence () {
  for (var i= 0; i< playsToWin; i++) {
    colorSequence.push(randomColor());
  }
  //console.log("This is the array: ", colorSequence);
}

// start new game
function startGame() {
  createColorSequence();
  count = 0;
  playGame();
  return 0;
}

// decide if game continues or if it is finished
function playGame() {
  if (count < playsToWin) {
    count += 1;
    //console.log("Counter is: ", count);
    playSequence(count);
  } else {
    //console.log("You win!")
    youWin();
    pressColoredButtons = false;
  }
  return 0;
}

// store winning sequence
function youWin() {
//  alert("You win! Congrats!! :o)");
  $("#countDisplay").html("<span class='winMsg'>You Win!</span>");
  resetStart();
  return 0;
}

// define delay of animation when player makes a mistake
var restartAnimationDelay = 1500;
// store restart sequence for non-strict mode
function levelRestart() {
  //console.log("Restarting level...")
  var i= 0;
  var animation = setInterval(function() {
    i += 1;
    if (i > 1) {
      //console.log("You made a mistake. Repeating the sequence...")
      count-= 1;
      playerSequence = [];
      playGame();
      clearInterval(animation);
    }
  }, restartAnimationDelay);
  return 0;
}

// store failure sequence for strict mode
function gameFail() {
  //console.log("Game Over!")
  var i= 0;
  var animation = setInterval(function() {
    i += 1;
    if (i > 1) {
      //console.log("Game restarts now!!!")
      resetStart();
      startGame();
      clearInterval(animation);
    }
  }, restartAnimationDelay);
  return 0;
}

// define delay of animation when computer plays sequence
var computerAnimationDelay = 1000;
// stop pressing of buttons while "play sequence" animation is on
var holdBtns = false;
// button animation for game
function playSequence(count) {
  pressColoredButtons = false; // block colored button
  holdBtns = true; // block Start and Strict buttons
  // make sequence of buttons
  var playThis =[];
  for (var i= 0; i<count; i++) {
    playThis.push(colorSequence[i]);
  }
  // play sequence of buttons according to counter
  //console.log("This is the ", count, "play: ", playThis);
  var i= 0;
  var animation = setInterval(function() {
    if (i === 0) {
      // updates counter display
      if (count < 10) {
        $("#countDisplay").html("0"+count);
      } else {
        $("#countDisplay").html(count);
      }
    }
    // blinking function
    function myFunc() {
      btnAnimation(playThis[i]);
      i += 1;
      //console.log("#"+playThis[i]+"Btn");
    }
    // call blinking function for each arr element and stop interval
    if (i < playThis.length-1 && gameOn) {
      myFunc();
    } else if (gameOn === false) {
      holdBtns = false;
      clearInterval(animation);
    } else {
      myFunc();
      pressColoredButtons = true;
      holdBtns = false;
      clearInterval(animation);
    }
  }, computerAnimationDelay);

  return 0;
}

// colored buttons action
function btnAction(color) {
  playerSequence.push(color);
  if (comparePlays()) {
    btnAnimation(color);
  } else {
    failAnimation(color);
  }
  //console.log("player sequence now is: ", playerSequence);
  //console.log("counter now is: ", count);
  //console.log("lenght of player sequence now is: ", playerSequence.length);
  // if wrong move
  if (!comparePlays()) {
    if (strict) {
      pressColoredButtons = false;
      gameFail();
    } else {
      pressColoredButtons = false;
      levelRestart();
    }
  // if right move
} else if (playerSequence.length === count) {
    //console.log("print this");
    pressColoredButtons = false;
    playerSequence = [];
    playGame();
  }
  return 0;
}

// bundle of animations for colored buttons being pressed
function btnAnimation(color) {
  playSound(color);
  btnBlink(color);
}

// bundle of animations for failed play
function failAnimation(color) {
  $("#countDisplay").html("!!");
  playSound("fail");
  btnBlink(color);
  displayBlink();
}

// [animation] play required sound
function playSound(color) {
  var audioAdress;
  switch (color) {
    case "blue":
      audioAddress = "https://s3.amazonaws.com/freecodecamp/simonSound3.mp3";
      break;
    case "fail":
      audioAddress = "http://www.orangefreesounds.com/wp-content/uploads/2016/08/sms-tone.mp3";
      break;
    case "green":
      audioAddress = "https://s3.amazonaws.com/freecodecamp/simonSound1.mp3";
      break;
    case "red":
      audioAddress = "https://s3.amazonaws.com/freecodecamp/simonSound4.mp3";
      break;
    case "yellow":
      audioAddress = "https://s3.amazonaws.com/freecodecamp/simonSound2.mp3";
      break;
    default:
      //console.log("problem with button animation audio");
  }
  var audio = new Audio(audioAddress);
  audio.play();
}

// [animation] blink the colored buttons
function btnBlink(color) {
  $("#"+color+"Btn").animate({
    opacity: '0.5',
  }, "fast");
  $("#"+color+"Btn").animate({
    opacity: '1',
  },"fast");
}

// [animation] blink the counter display
function displayBlink() {
  $("#countDisplay").animate({
    opacity: '0.5',
  }, "slow");
  $("#countDisplay").animate({
    opacity: '1',
  },"slow");
}

// compare player move with correct move
function comparePlays() {
  return playerSequence[playerSequence.length-1] === colorSequence[playerSequence.length-1];
}




$(document).ready( function(){

// CODE FOR Color buttons
  $( "#greenBtn" ).click(function() {
    if (pressColoredButtons === true) {
      btnAction("green");
    }
    return 0;
  });

  $( "#redBtn" ).click(function() {
    if (pressColoredButtons === true) {
      btnAction("red");
    }
    return 0;
  });

  $( "#yellowBtn" ).click(function() {
    if (pressColoredButtons === true) {
      btnAction("yellow");
    }
    return 0;
  });

  $( "#blueBtn" ).click(function() {
    if (pressColoredButtons === true) {
      btnAction("blue");
    }
    return 0;
  });
// end of CODE FOR Color buttons

// CODE FOR game ON/OFF button
  $( "#onBtn" ).click(function() {
    gameOn = !gameOn;
    resetAll();
    //console.log("gameOn is now: ", gameOn);
    return 0;
  });

// CODE FOR start button
  $( "#startBtn" ).click(function() {
    if (gameOn === true && holdBtns === false) {
      resetStart();
      //console.log("gameStart is now: ", gameOn);
      startGame();
    }
    return 0;
  });

// CODE FOR strict button
  $( "#strictBtn" ).click(function() {
    if (gameOn === true && holdBtns === false) {
      strict = !strict;
      //console.log("strict is now: ", strict);
    }
    if (strict === true) {
      $("#indicatorLight").html('<div id="strictLightOn"></div>');
    } else {
      $("#indicatorLight").html('<div id="strictLightOff"></div>');
    }
    return 0;
  });

});
